use std::fs::File;
use std::io::{Error, Write};

const OVERWRITE: bool = false;
fn gen_file(name: &str) -> Result<File, Error> {
    let mut file = File::options()
        .create(true)
        .write(true)
        .create_new(!OVERWRITE)
        .truncate(true)
        .open(format!("./battlelib/data/battle/functions/{}.mcfunction", name))?;
    file.write_all(b"# Generated by rust codes\n")?;
    Ok(file)
}

mod scripts {
    use std::io::{Error, Write};
    use crate::gen_file;

    pub fn circles() -> Result<(), Error> {
        for rad in 1..=25 {
            let mut file = gen_file(&format!("circle{}", rad))?;
            for i in 0..360 {
                let (sin, cos) = ((i as f64) * std::f64::consts::PI / 180.0).sin_cos();
                let x = sin * rad as f64;
                let y = cos * rad as f64;
                writeln!(file, "execute positioned ~{x} ~ ~{y} run function battleapi:circle_cb")?;
            }
        }
        Ok(())
    }
}

fn main() {
    let ss = [scripts::circles];
    for f in ss {
        let result = std::panic::catch_unwind(|| {
            if let Err(e) = f() {
                eprintln!("Scripts failed for {:?}", e);
            }
        });
        if let Err(e) = result {
            eprintln!("Panicked for {:?}", e);
        }
    }
}
